// Code generated by pigeon; DO NOT EDIT.

package query

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Expr",
			pos:  position{line: 5, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 5, col: 24, offset: 46},
				run: (*parser).callonExpr1,
				expr: &seqExpr{
					pos: position{line: 5, col: 24, offset: 46},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 24, offset: 2532},
							expr: &charClassMatcher{
								pos:        position{line: 37, col: 24, offset: 2532},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 5, col: 26, offset: 48},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 5, col: 28, offset: 50},
								name: "OrExpr",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 24, offset: 2532},
							expr: &charClassMatcher{
								pos:        position{line: 37, col: 24, offset: 2532},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "OrExpr",
			pos:  position{line: 6, col: 1, offset: 118},
			expr: &actionExpr{
				pos: position{line: 6, col: 24, offset: 141},
				run: (*parser).callonOrExpr1,
				expr: &seqExpr{
					pos: position{line: 6, col: 24, offset: 141},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 6, col: 24, offset: 141},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 6, col: 29, offset: 146},
								name: "AndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 6, col: 37, offset: 154},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 6, col: 42, offset: 159},
								expr: &seqExpr{
									pos: position{line: 6, col: 43, offset: 160},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 37, col: 24, offset: 2532},
											expr: &charClassMatcher{
												pos:        position{line: 37, col: 24, offset: 2532},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 7, col: 25, offset: 265},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 7, col: 25, offset: 265},
													val:        "OR",
													ignoreCase: false,
													want:       "\"OR\"",
												},
												&litMatcher{
													pos:        position{line: 7, col: 32, offset: 272},
													val:        "or",
													ignoreCase: false,
													want:       "\"or\"",
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 37, col: 24, offset: 2532},
											expr: &charClassMatcher{
												pos:        position{line: 37, col: 24, offset: 2532},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 6, col: 56, offset: 173},
											name: "AndExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpr",
			pos:  position{line: 8, col: 1, offset: 278},
			expr: &actionExpr{
				pos: position{line: 8, col: 24, offset: 301},
				run: (*parser).callonAndExpr1,
				expr: &seqExpr{
					pos: position{line: 8, col: 24, offset: 301},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 8, col: 24, offset: 301},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 29, offset: 306},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 37, offset: 314},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 8, col: 42, offset: 319},
								expr: &seqExpr{
									pos: position{line: 8, col: 43, offset: 320},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 37, col: 24, offset: 2532},
											expr: &charClassMatcher{
												pos:        position{line: 37, col: 24, offset: 2532},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 8, col: 47, offset: 324},
											label: "op",
											expr: &choiceExpr{
												pos: position{line: 9, col: 25, offset: 425},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 9, col: 25, offset: 425},
														val:        "AND",
														ignoreCase: false,
														want:       "\"AND\"",
													},
													&litMatcher{
														pos:        position{line: 9, col: 33, offset: 433},
														val:        "and",
														ignoreCase: false,
														want:       "\"and\"",
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 37, col: 24, offset: 2532},
											expr: &charClassMatcher{
												pos:        position{line: 37, col: 24, offset: 2532},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 8, col: 60, offset: 337},
											name: "NotExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 10, col: 1, offset: 440},
			expr: &choiceExpr{
				pos: position{line: 10, col: 24, offset: 463},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 10, col: 24, offset: 463},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 10, col: 24, offset: 463},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 10, col: 25, offset: 464},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 10, col: 25, offset: 464},
											val:        "NOT",
											ignoreCase: false,
											want:       "\"NOT\"",
										},
										&litMatcher{
											pos:        position{line: 10, col: 33, offset: 472},
											val:        "not",
											ignoreCase: false,
											want:       "\"not\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 37, col: 24, offset: 2532},
									expr: &charClassMatcher{
										pos:        position{line: 37, col: 24, offset: 2532},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 42, offset: 481},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 47, offset: 486},
										name: "Primary",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 11, col: 24, offset: 584},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 12, col: 1, offset: 592},
			expr: &choiceExpr{
				pos: position{line: 12, col: 24, offset: 615},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 12, col: 24, offset: 615},
						name: "ParenExpr",
					},
					&actionExpr{
						pos: position{line: 14, col: 24, offset: 794},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 14, col: 24, offset: 794},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 14, col: 24, offset: 794},
									label: "field",
									expr: &actionExpr{
										pos: position{line: 20, col: 24, offset: 1339},
										run: (*parser).callonPrimary6,
										expr: &seqExpr{
											pos: position{line: 20, col: 24, offset: 1339},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 21, col: 24, offset: 1451},
													val:        "[_a-zA-Z]",
													chars:      []rune{'_'},
													ranges:     []rune{'a', 'z', 'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 21, col: 33, offset: 1460},
													expr: &charClassMatcher{
														pos:        position{line: 21, col: 33, offset: 1460},
														val:        "[_a-zA-Z0-9]",
														chars:      []rune{'_'},
														ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 20, col: 37, offset: 1352},
													expr: &seqExpr{
														pos: position{line: 20, col: 38, offset: 1353},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 20, col: 38, offset: 1353},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&charClassMatcher{
																pos:        position{line: 21, col: 24, offset: 1451},
																val:        "[_a-zA-Z]",
																chars:      []rune{'_'},
																ranges:     []rune{'a', 'z', 'A', 'Z'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 21, col: 33, offset: 1460},
																expr: &charClassMatcher{
																	pos:        position{line: 21, col: 33, offset: 1460},
																	val:        "[_a-zA-Z0-9]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 37, col: 24, offset: 2532},
									expr: &charClassMatcher{
										pos:        position{line: 37, col: 24, offset: 2532},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 15, col: 25, offset: 912},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 15, col: 25, offset: 912},
											val:        "EXISTS",
											ignoreCase: false,
											want:       "\"EXISTS\"",
										},
										&litMatcher{
											pos:        position{line: 15, col: 36, offset: 923},
											val:        "exists",
											ignoreCase: false,
											want:       "\"exists\"",
										},
										&litMatcher{
											pos:        position{line: 15, col: 47, offset: 934},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 16, col: 24, offset: 962},
						run: (*parser).callonPrimary23,
						expr: &seqExpr{
							pos: position{line: 16, col: 24, offset: 962},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 16, col: 24, offset: 962},
									label: "field",
									expr: &actionExpr{
										pos: position{line: 20, col: 24, offset: 1339},
										run: (*parser).callonPrimary26,
										expr: &seqExpr{
											pos: position{line: 20, col: 24, offset: 1339},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 21, col: 24, offset: 1451},
													val:        "[_a-zA-Z]",
													chars:      []rune{'_'},
													ranges:     []rune{'a', 'z', 'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 21, col: 33, offset: 1460},
													expr: &charClassMatcher{
														pos:        position{line: 21, col: 33, offset: 1460},
														val:        "[_a-zA-Z0-9]",
														chars:      []rune{'_'},
														ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 20, col: 37, offset: 1352},
													expr: &seqExpr{
														pos: position{line: 20, col: 38, offset: 1353},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 20, col: 38, offset: 1353},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&charClassMatcher{
																pos:        position{line: 21, col: 24, offset: 1451},
																val:        "[_a-zA-Z]",
																chars:      []rune{'_'},
																ranges:     []rune{'a', 'z', 'A', 'Z'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 21, col: 33, offset: 1460},
																expr: &charClassMatcher{
																	pos:        position{line: 21, col: 33, offset: 1460},
																	val:        "[_a-zA-Z0-9]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 37, col: 24, offset: 2532},
									expr: &charClassMatcher{
										pos:        position{line: 37, col: 24, offset: 2532},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 16, col: 43, offset: 981},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 34, col: 26, offset: 2217},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 34, col: 26, offset: 2217},
												val:        ">=",
												ignoreCase: false,
												want:       "\">=\"",
											},
											&litMatcher{
												pos:        position{line: 34, col: 33, offset: 2224},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
											&litMatcher{
												pos:        position{line: 34, col: 39, offset: 2230},
												val:        "<=",
												ignoreCase: false,
												want:       "\"<=\"",
											},
											&litMatcher{
												pos:        position{line: 34, col: 46, offset: 2237},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
											&litMatcher{
												pos:        position{line: 34, col: 52, offset: 2243},
												val:        "!:",
												ignoreCase: false,
												want:       "\"!:\"",
											},
											&litMatcher{
												pos:        position{line: 34, col: 59, offset: 2250},
												val:        "!=",
												ignoreCase: false,
												want:       "\"!=\"",
											},
											&charClassMatcher{
												pos:        position{line: 34, col: 66, offset: 2257},
												val:        "[:=~]",
												chars:      []rune{':', '=', '~'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 37, col: 24, offset: 2532},
									expr: &charClassMatcher{
										pos:        position{line: 37, col: 24, offset: 2532},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 16, col: 54, offset: 992},
									label: "value",
									expr: &choiceExpr{
										pos: position{line: 18, col: 24, offset: 1203},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 35, col: 24, offset: 2298},
												run: (*parser).callonPrimary52,
												expr: &seqExpr{
													pos: position{line: 35, col: 24, offset: 2298},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 35, col: 24, offset: 2298},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 37, col: 24, offset: 2532},
															expr: &charClassMatcher{
																pos:        position{line: 37, col: 24, offset: 2532},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 35, col: 30, offset: 2304},
															label: "values",
															expr: &zeroOrOneExpr{
																pos: position{line: 35, col: 37, offset: 2311},
																expr: &actionExpr{
																	pos: position{line: 36, col: 24, offset: 2415},
																	run: (*parser).callonPrimary59,
																	expr: &seqExpr{
																		pos: position{line: 36, col: 24, offset: 2415},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 36, col: 24, offset: 2415},
																				label: "head",
																				expr: &choiceExpr{
																					pos: position{line: 19, col: 24, offset: 1277},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 26, col: 24, offset: 1721},
																							run: (*parser).callonPrimary63,
																							expr: &seqExpr{
																								pos: position{line: 26, col: 24, offset: 1721},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 26, col: 24, offset: 1721},
																										val:        "\"",
																										ignoreCase: false,
																										want:       "\"\\\"\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 27, col: 24, offset: 1824},
																										expr: &choiceExpr{
																											pos: position{line: 27, col: 26, offset: 1826},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 27, col: 26, offset: 1826},
																													exprs: []any{
																														&notExpr{
																															pos: position{line: 27, col: 26, offset: 1826},
																															expr: &charClassMatcher{
																																pos:        position{line: 28, col: 24, offset: 1889},
																																val:        "[\"\\\\\\x00-\\x1f]",
																																chars:      []rune{'"', '\\'},
																																ranges:     []rune{'\x00', '\x1f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&anyMatcher{
																															line: 27, col: 39, offset: 1839,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 27, col: 43, offset: 1843},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 27, col: 43, offset: 1843},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&choiceExpr{
																															pos: position{line: 29, col: 24, offset: 1927},
																															alternatives: []any{
																																&charClassMatcher{
																																	pos:        position{line: 30, col: 24, offset: 1983},
																																	val:        "[\"\\\\/bfnrt]",
																																	chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&seqExpr{
																																	pos: position{line: 31, col: 24, offset: 2018},
																																	exprs: []any{
																																		&litMatcher{
																																			pos:        position{line: 31, col: 24, offset: 2018},
																																			val:        "u",
																																			ignoreCase: false,
																																			want:       "\"u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 32, col: 24, offset: 2081},
																																			val:        "[0-9a-f]i",
																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																			ignoreCase: true,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 32, col: 24, offset: 2081},
																																			val:        "[0-9a-f]i",
																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																			ignoreCase: true,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 32, col: 24, offset: 2081},
																																			val:        "[0-9a-f]i",
																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																			ignoreCase: true,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 32, col: 24, offset: 2081},
																																			val:        "[0-9a-f]i",
																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																			ignoreCase: true,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 26, col: 40, offset: 1737},
																										val:        "\"",
																										ignoreCase: false,
																										want:       "\"\\\"\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 23, col: 24, offset: 1560},
																							run: (*parser).callonPrimary83,
																							expr: &seqExpr{
																								pos: position{line: 23, col: 24, offset: 1560},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 23, col: 24, offset: 1560},
																										expr: &litMatcher{
																											pos:        position{line: 23, col: 24, offset: 1560},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 22, col: 24, offset: 1497},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 22, col: 24, offset: 1497},
																												val:        "0",
																												ignoreCase: false,
																												want:       "\"0\"",
																											},
																											&seqExpr{
																												pos: position{line: 22, col: 30, offset: 1503},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 25, col: 24, offset: 1692},
																														val:        "[1-9]",
																														ranges:     []rune{'1', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 22, col: 50, offset: 1523},
																														expr: &charClassMatcher{
																															pos:        position{line: 24, col: 24, offset: 1663},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 23, col: 37, offset: 1573},
																										expr: &seqExpr{
																											pos: position{line: 23, col: 39, offset: 1575},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 23, col: 39, offset: 1575},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 23, col: 43, offset: 1579},
																													expr: &charClassMatcher{
																														pos:        position{line: 24, col: 24, offset: 1663},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 33, col: 24, offset: 2114},
																							run: (*parser).callonPrimary98,
																							expr: &choiceExpr{
																								pos: position{line: 33, col: 25, offset: 2115},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 33, col: 25, offset: 2115},
																										val:        "true",
																										ignoreCase: false,
																										want:       "\"true\"",
																									},
																									&litMatcher{
																										pos:        position{line: 33, col: 34, offset: 2124},
																										val:        "false",
																										ignoreCase: false,
																										want:       "\"false\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 20, col: 24, offset: 1339},
																							run: (*parser).callonPrimary102,
																							expr: &seqExpr{
																								pos: position{line: 20, col: 24, offset: 1339},
																								exprs: []any{
																									&charClassMatcher{
																										pos:        position{line: 21, col: 24, offset: 1451},
																										val:        "[_a-zA-Z]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'a', 'z', 'A', 'Z'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 21, col: 33, offset: 1460},
																										expr: &charClassMatcher{
																											pos:        position{line: 21, col: 33, offset: 1460},
																											val:        "[_a-zA-Z0-9]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 20, col: 37, offset: 1352},
																										expr: &seqExpr{
																											pos: position{line: 20, col: 38, offset: 1353},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 20, col: 38, offset: 1353},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 21, col: 24, offset: 1451},
																													val:        "[_a-zA-Z]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'a', 'z', 'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 21, col: 33, offset: 1460},
																													expr: &charClassMatcher{
																														pos:        position{line: 21, col: 33, offset: 1460},
																														val:        "[_a-zA-Z0-9]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 36, col: 40, offset: 2431},
																				label: "tail",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 36, col: 45, offset: 2436},
																					expr: &seqExpr{
																						pos: position{line: 36, col: 46, offset: 2437},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 37, col: 24, offset: 2532},
																								expr: &charClassMatcher{
																									pos:        position{line: 37, col: 24, offset: 2532},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 36, col: 48, offset: 2439},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 37, col: 24, offset: 2532},
																								expr: &charClassMatcher{
																									pos:        position{line: 37, col: 24, offset: 2532},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 19, col: 24, offset: 1277},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 26, col: 24, offset: 1721},
																										run: (*parser).callonPrimary122,
																										expr: &seqExpr{
																											pos: position{line: 26, col: 24, offset: 1721},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 26, col: 24, offset: 1721},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 27, col: 24, offset: 1824},
																													expr: &choiceExpr{
																														pos: position{line: 27, col: 26, offset: 1826},
																														alternatives: []any{
																															&seqExpr{
																																pos: position{line: 27, col: 26, offset: 1826},
																																exprs: []any{
																																	&notExpr{
																																		pos: position{line: 27, col: 26, offset: 1826},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 28, col: 24, offset: 1889},
																																			val:        "[\"\\\\\\x00-\\x1f]",
																																			chars:      []rune{'"', '\\'},
																																			ranges:     []rune{'\x00', '\x1f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&anyMatcher{
																																		line: 27, col: 39, offset: 1839,
																																	},
																																},
																															},
																															&seqExpr{
																																pos: position{line: 27, col: 43, offset: 1843},
																																exprs: []any{
																																	&litMatcher{
																																		pos:        position{line: 27, col: 43, offset: 1843},
																																		val:        "\\",
																																		ignoreCase: false,
																																		want:       "\"\\\\\"",
																																	},
																																	&choiceExpr{
																																		pos: position{line: 29, col: 24, offset: 1927},
																																		alternatives: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 30, col: 24, offset: 1983},
																																				val:        "[\"\\\\/bfnrt]",
																																				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&seqExpr{
																																				pos: position{line: 31, col: 24, offset: 2018},
																																				exprs: []any{
																																					&litMatcher{
																																						pos:        position{line: 31, col: 24, offset: 2018},
																																						val:        "u",
																																						ignoreCase: false,
																																						want:       "\"u\"",
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 32, col: 24, offset: 2081},
																																						val:        "[0-9a-f]i",
																																						ranges:     []rune{'0', '9', 'a', 'f'},
																																						ignoreCase: true,
																																						inverted:   false,
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 32, col: 24, offset: 2081},
																																						val:        "[0-9a-f]i",
																																						ranges:     []rune{'0', '9', 'a', 'f'},
																																						ignoreCase: true,
																																						inverted:   false,
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 32, col: 24, offset: 2081},
																																						val:        "[0-9a-f]i",
																																						ranges:     []rune{'0', '9', 'a', 'f'},
																																						ignoreCase: true,
																																						inverted:   false,
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 32, col: 24, offset: 2081},
																																						val:        "[0-9a-f]i",
																																						ranges:     []rune{'0', '9', 'a', 'f'},
																																						ignoreCase: true,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 26, col: 40, offset: 1737},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 23, col: 24, offset: 1560},
																										run: (*parser).callonPrimary142,
																										expr: &seqExpr{
																											pos: position{line: 23, col: 24, offset: 1560},
																											exprs: []any{
																												&zeroOrOneExpr{
																													pos: position{line: 23, col: 24, offset: 1560},
																													expr: &litMatcher{
																														pos:        position{line: 23, col: 24, offset: 1560},
																														val:        "-",
																														ignoreCase: false,
																														want:       "\"-\"",
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 22, col: 24, offset: 1497},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 22, col: 24, offset: 1497},
																															val:        "0",
																															ignoreCase: false,
																															want:       "\"0\"",
																														},
																														&seqExpr{
																															pos: position{line: 22, col: 30, offset: 1503},
																															exprs: []any{
																																&charClassMatcher{
																																	pos:        position{line: 25, col: 24, offset: 1692},
																																	val:        "[1-9]",
																																	ranges:     []rune{'1', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 22, col: 50, offset: 1523},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 24, col: 24, offset: 1663},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 23, col: 37, offset: 1573},
																													expr: &seqExpr{
																														pos: position{line: 23, col: 39, offset: 1575},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 23, col: 39, offset: 1575},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																															&oneOrMoreExpr{
																																pos: position{line: 23, col: 43, offset: 1579},
																																expr: &charClassMatcher{
																																	pos:        position{line: 24, col: 24, offset: 1663},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 33, col: 24, offset: 2114},
																										run: (*parser).callonPrimary157,
																										expr: &choiceExpr{
																											pos: position{line: 33, col: 25, offset: 2115},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 33, col: 25, offset: 2115},
																													val:        "true",
																													ignoreCase: false,
																													want:       "\"true\"",
																												},
																												&litMatcher{
																													pos:        position{line: 33, col: 34, offset: 2124},
																													val:        "false",
																													ignoreCase: false,
																													want:       "\"false\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 20, col: 24, offset: 1339},
																										run: (*parser).callonPrimary161,
																										expr: &seqExpr{
																											pos: position{line: 20, col: 24, offset: 1339},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 21, col: 24, offset: 1451},
																													val:        "[_a-zA-Z]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'a', 'z', 'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 21, col: 33, offset: 1460},
																													expr: &charClassMatcher{
																														pos:        position{line: 21, col: 33, offset: 1460},
																														val:        "[_a-zA-Z0-9]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 20, col: 37, offset: 1352},
																													expr: &seqExpr{
																														pos: position{line: 20, col: 38, offset: 1353},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 20, col: 38, offset: 1353},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																															&charClassMatcher{
																																pos:        position{line: 21, col: 24, offset: 1451},
																																val:        "[_a-zA-Z]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'a', 'z', 'A', 'Z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 21, col: 33, offset: 1460},
																																expr: &charClassMatcher{
																																	pos:        position{line: 21, col: 33, offset: 1460},
																																	val:        "[_a-zA-Z0-9]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 37, col: 24, offset: 2532},
															expr: &charClassMatcher{
																pos:        position{line: 37, col: 24, offset: 2532},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 35, col: 54, offset: 2328},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 26, col: 24, offset: 1721},
												run: (*parser).callonPrimary175,
												expr: &seqExpr{
													pos: position{line: 26, col: 24, offset: 1721},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 26, col: 24, offset: 1721},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 27, col: 24, offset: 1824},
															expr: &choiceExpr{
																pos: position{line: 27, col: 26, offset: 1826},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 27, col: 26, offset: 1826},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 27, col: 26, offset: 1826},
																				expr: &charClassMatcher{
																					pos:        position{line: 28, col: 24, offset: 1889},
																					val:        "[\"\\\\\\x00-\\x1f]",
																					chars:      []rune{'"', '\\'},
																					ranges:     []rune{'\x00', '\x1f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&anyMatcher{
																				line: 27, col: 39, offset: 1839,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 27, col: 43, offset: 1843},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 27, col: 43, offset: 1843},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&choiceExpr{
																				pos: position{line: 29, col: 24, offset: 1927},
																				alternatives: []any{
																					&charClassMatcher{
																						pos:        position{line: 30, col: 24, offset: 1983},
																						val:        "[\"\\\\/bfnrt]",
																						chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&seqExpr{
																						pos: position{line: 31, col: 24, offset: 2018},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 31, col: 24, offset: 2018},
																								val:        "u",
																								ignoreCase: false,
																								want:       "\"u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 32, col: 24, offset: 2081},
																								val:        "[0-9a-f]i",
																								ranges:     []rune{'0', '9', 'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 32, col: 24, offset: 2081},
																								val:        "[0-9a-f]i",
																								ranges:     []rune{'0', '9', 'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 32, col: 24, offset: 2081},
																								val:        "[0-9a-f]i",
																								ranges:     []rune{'0', '9', 'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 32, col: 24, offset: 2081},
																								val:        "[0-9a-f]i",
																								ranges:     []rune{'0', '9', 'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 26, col: 40, offset: 1737},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 23, col: 24, offset: 1560},
												run: (*parser).callonPrimary195,
												expr: &seqExpr{
													pos: position{line: 23, col: 24, offset: 1560},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 23, col: 24, offset: 1560},
															expr: &litMatcher{
																pos:        position{line: 23, col: 24, offset: 1560},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&choiceExpr{
															pos: position{line: 22, col: 24, offset: 1497},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 22, col: 24, offset: 1497},
																	val:        "0",
																	ignoreCase: false,
																	want:       "\"0\"",
																},
																&seqExpr{
																	pos: position{line: 22, col: 30, offset: 1503},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 25, col: 24, offset: 1692},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 22, col: 50, offset: 1523},
																			expr: &charClassMatcher{
																				pos:        position{line: 24, col: 24, offset: 1663},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 23, col: 37, offset: 1573},
															expr: &seqExpr{
																pos: position{line: 23, col: 39, offset: 1575},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 23, col: 39, offset: 1575},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 23, col: 43, offset: 1579},
																		expr: &charClassMatcher{
																			pos:        position{line: 24, col: 24, offset: 1663},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 33, col: 24, offset: 2114},
												run: (*parser).callonPrimary210,
												expr: &choiceExpr{
													pos: position{line: 33, col: 25, offset: 2115},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 33, col: 25, offset: 2115},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 33, col: 34, offset: 2124},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 20, col: 24, offset: 1339},
												run: (*parser).callonPrimary214,
												expr: &seqExpr{
													pos: position{line: 20, col: 24, offset: 1339},
													exprs: []any{
														&charClassMatcher{
															pos:        position{line: 21, col: 24, offset: 1451},
															val:        "[_a-zA-Z]",
															chars:      []rune{'_'},
															ranges:     []rune{'a', 'z', 'A', 'Z'},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 21, col: 33, offset: 1460},
															expr: &charClassMatcher{
																pos:        position{line: 21, col: 33, offset: 1460},
																val:        "[_a-zA-Z0-9]",
																chars:      []rune{'_'},
																ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 20, col: 37, offset: 1352},
															expr: &seqExpr{
																pos: position{line: 20, col: 38, offset: 1353},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 20, col: 38, offset: 1353},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 21, col: 24, offset: 1451},
																		val:        "[_a-zA-Z]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'a', 'z', 'A', 'Z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 21, col: 33, offset: 1460},
																		expr: &charClassMatcher{
																			pos:        position{line: 21, col: 33, offset: 1460},
																			val:        "[_a-zA-Z0-9]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 17, col: 24, offset: 1089},
						run: (*parser).callonPrimary225,
						expr: &labeledExpr{
							pos:   position{line: 17, col: 24, offset: 1089},
							label: "field",
							expr: &actionExpr{
								pos: position{line: 20, col: 24, offset: 1339},
								run: (*parser).callonPrimary227,
								expr: &seqExpr{
									pos: position{line: 20, col: 24, offset: 1339},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 21, col: 24, offset: 1451},
											val:        "[_a-zA-Z]",
											chars:      []rune{'_'},
											ranges:     []rune{'a', 'z', 'A', 'Z'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 21, col: 33, offset: 1460},
											expr: &charClassMatcher{
												pos:        position{line: 21, col: 33, offset: 1460},
												val:        "[_a-zA-Z0-9]",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 20, col: 37, offset: 1352},
											expr: &seqExpr{
												pos: position{line: 20, col: 38, offset: 1353},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 20, col: 38, offset: 1353},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&charClassMatcher{
														pos:        position{line: 21, col: 24, offset: 1451},
														val:        "[_a-zA-Z]",
														chars:      []rune{'_'},
														ranges:     []rune{'a', 'z', 'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 21, col: 33, offset: 1460},
														expr: &charClassMatcher{
															pos:        position{line: 21, col: 33, offset: 1460},
															val:        "[_a-zA-Z0-9]",
															chars:      []rune{'_'},
															ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpr",
			pos:  position{line: 13, col: 1, offset: 666},
			expr: &actionExpr{
				pos: position{line: 13, col: 24, offset: 689},
				run: (*parser).callonParenExpr1,
				expr: &seqExpr{
					pos: position{line: 13, col: 24, offset: 689},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 13, col: 24, offset: 689},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 24, offset: 2532},
							expr: &charClassMatcher{
								pos:        position{line: 37, col: 24, offset: 2532},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 13, col: 30, offset: 695},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 35, offset: 700},
								name: "Expr",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 24, offset: 2532},
							expr: &charClassMatcher{
								pos:        position{line: 37, col: 24, offset: 2532},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 13, col: 42, offset: 707},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
	},
}

func (c *current) onExpr1(e any) (any, error) {
	return e, nil
}

func (p *parser) callonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr1(stack["e"])
}

func (c *current) onOrExpr1(left, rest any) (any, error) {
	return parseBooleanExpression(left, rest)
}

func (p *parser) callonOrExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpr1(stack["left"], stack["rest"])
}

func (c *current) onAndExpr1(left, rest any) (any, error) {
	return parseBooleanExpression(left, rest)
}

func (p *parser) callonAndExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpr1(stack["left"], stack["rest"])
}

func (c *current) onNotExpr2(expr any) (any, error) {
	return &NotExpr{Expr: expr.(Expr)}, nil
}

func (p *parser) callonNotExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["expr"])
}

func (c *current) onPrimary6() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonPrimary6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary6()
}

func (c *current) onPrimary3(field any) (any, error) {
	return parseExistsExpression(field)
}

func (p *parser) callonPrimary3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["field"])
}

func (c *current) onPrimary26() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonPrimary26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary26()
}

func (c *current) onPrimary63() (any, error) {
	return parseString(c)
}

func (p *parser) callonPrimary63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary63()
}

func (c *current) onPrimary83() (any, error) {
	return parseNumber(c)
}

func (p *parser) callonPrimary83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary83()
}

func (c *current) onPrimary98() (any, error) {
	return parseBool(c)
}

func (p *parser) callonPrimary98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary98()
}

func (c *current) onPrimary102() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonPrimary102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary102()
}

func (c *current) onPrimary122() (any, error) {
	return parseString(c)
}

func (p *parser) callonPrimary122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary122()
}

func (c *current) onPrimary142() (any, error) {
	return parseNumber(c)
}

func (p *parser) callonPrimary142() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary142()
}

func (c *current) onPrimary157() (any, error) {
	return parseBool(c)
}

func (p *parser) callonPrimary157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary157()
}

func (c *current) onPrimary161() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonPrimary161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary161()
}

func (c *current) onPrimary59(head, tail any) (any, error) {
	return parseOneOfValues(head, tail)
}

func (p *parser) callonPrimary59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary59(stack["head"], stack["tail"])
}

func (c *current) onPrimary52(values any) (any, error) {
	return parseOneOfExpression(values)
}

func (p *parser) callonPrimary52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary52(stack["values"])
}

func (c *current) onPrimary175() (any, error) {
	return parseString(c)
}

func (p *parser) callonPrimary175() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary175()
}

func (c *current) onPrimary195() (any, error) {
	return parseNumber(c)
}

func (p *parser) callonPrimary195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary195()
}

func (c *current) onPrimary210() (any, error) {
	return parseBool(c)
}

func (p *parser) callonPrimary210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary210()
}

func (c *current) onPrimary214() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonPrimary214() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary214()
}

func (c *current) onPrimary23(field, op, value any) (any, error) {
	return parseFieldExpression(field, op, value)
}

func (p *parser) callonPrimary23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary23(stack["field"], stack["op"], stack["value"])
}

func (c *current) onPrimary227() (any, error) {
	return Identifier(c.text), nil
}

func (p *parser) callonPrimary227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary227()
}

func (c *current) onPrimary225(field any) (any, error) {
	return parseBoolFieldExpr(field)
}

func (p *parser) callonPrimary225() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary225(stack["field"])
}

func (c *current) onParenExpr1(expr any) (any, error) {
	return expr.(Expr), nil
}

func (p *parser) callonParenExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpr1(stack["expr"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
